From dd0640cc8646cf6e5084fa01677de230291f8ed5 Mon Sep 17 00:00:00 2001
From: Yuchen Lin <381564291@qq.com>
Date: Tue, 4 Mar 2025 21:21:32 +0800
Subject: [PATCH 33/85] =?UTF-8?q?fix-=E4=BF=AE=E6=94=B9=E5=90=8E=E7=AB=AF?=
 =?UTF-8?q?=E4=BB=A3=E7=A0=81=E4=BD=BF=E7=94=A8redis?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 .gitignore                                    |   4 +-
 backend/.env                                  |   1 -
 backend/Dockerfile                            |   4 -
 backend/__pycache__/app.cpython-312.pyc       | Bin 1925 -> 0 bytes
 .../__pycache__/extensions.cpython-312.pyc    | Bin 853 -> 0 bytes
 backend/app.py                                |  26 +--
 backend/config.py                             |   6 +-
 backend/extensions.py                         |   5 +-
 .../models/__pycache__/user.cpython-312.pyc   | Bin 1946 -> 0 bytes
 backend/models/user.py                        | 154 ++++++++++++++++--
 backend/requirements.txt                      |   1 -
 .../__pycache__/auth_routes.cpython-312.pyc   | Bin 6383 -> 0 bytes
 backend/routes/auth_routes.py                 |   1 -
 .../__pycache__/auth_service.cpython-312.pyc  | Bin 5941 -> 0 bytes
 .../__pycache__/email_service.cpython-312.pyc | Bin 1500 -> 0 bytes
 .../verification_service.cpython-312.pyc      | Bin 3068 -> 0 bytes
 backend/services/auth_service.py              |  56 ++++---
 docker-compose.yml                            |   1 -
 18 files changed, 184 insertions(+), 75 deletions(-)
 delete mode 100644 backend/__pycache__/app.cpython-312.pyc
 delete mode 100644 backend/__pycache__/extensions.cpython-312.pyc
 delete mode 100644 backend/models/__pycache__/user.cpython-312.pyc
 delete mode 100644 backend/routes/__pycache__/auth_routes.cpython-312.pyc
 delete mode 100644 backend/services/__pycache__/auth_service.cpython-312.pyc
 delete mode 100644 backend/services/__pycache__/email_service.cpython-312.pyc
 delete mode 100644 backend/services/__pycache__/verification_service.cpython-312.pyc

diff --git a/.gitignore b/.gitignore
index 836a3a8..d89cd4b 100644
--- a/.gitignore
+++ b/.gitignore
@@ -27,4 +27,6 @@ build/
 
 .DS_Store
 .DS_Store?
-.rdb
\ No newline at end of file
+.rdb
+
+node_modules/
\ No newline at end of file
diff --git a/backend/.env b/backend/.env
index cad7b5d..cbd139c 100644
--- a/backend/.env
+++ b/backend/.env
@@ -1,6 +1,5 @@
 FLASK_APP=app.py
 FLASK_ENV=production
-SQLALCHEMY_DATABASE_URI=sqlite:///instance/app.db
 REDIS_URL=redis://redis:6379/0
 SECRET_KEY=
 JWT_SECRET_KEY=
\ No newline at end of file
diff --git a/backend/Dockerfile b/backend/Dockerfile
index aa2b923..067dbbd 100644
--- a/backend/Dockerfile
+++ b/backend/Dockerfile
@@ -7,13 +7,9 @@ RUN pip install --no-cache-dir -r requirements.txt
 
 COPY . .
 
-# Create instance directory with proper permissions - ensure the user running the app has full access
-RUN mkdir -p /app/instance && chmod 777 /app/instance && chown -R nobody:nogroup /app/instance
-
 # 使用环境变量配置
 ENV FLASK_APP=app.py
 ENV FLASK_ENV=production
-ENV SQLALCHEMY_DATABASE_URI=sqlite:////app/instance/app.db
 ENV REDIS_URL=redis://redis:6379/0
 
 # 邮件服务配置
diff --git a/backend/__pycache__/app.cpython-312.pyc b/backend/__pycache__/app.cpython-312.pyc
deleted file mode 100644
index 86b918d46438fd75ca6226e1238d625c0852d492..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1925
zcmbVNO-vg{6rT0&+UvEAQ-b(01gH`zb%e26C6|!WB11_-fwXoGxQCVP9g~Iit~;|U
zumuuGkswN?aHs@_9(t`nZH_&+s#K{LTp2-EMUB);dvi;qNICV*nyo2H)v6<T=FQCe
z{l2&3?;{Zz!T6PYJ3l2L^b6Z~gFh8cED*Mlid0TVB`(WxO!n!%5})N=nb(Dqm=#O@
ztiKe<2H;G1fU*(}s^a2n2$7f%VQKf&T~@~OLYEh$wW|KTz%JL^bEqO!q<HW*wvBU+
z_>P{Viy#Q8*$>ij-tnn<M=0eq-3b${YE&uc8aAv#%N;^~*svN-J_WDa$U60nkmd8#
zym+f<1ua1R=f^_e{0RaSJSz@aLGOMA5K(zm&^V1##XbM-DS909>|*R`Hdi(90C|Y4
za#qB<U1;;9*1CeuM0~|N|2IvDd(qQvtzOI<2w0NTpe~m}t3Ef&o|cv;t@u=VFSL7#
z7u4IzGv?{ER?oNF6VM|qyA_m1m(lBpa!U|v4q~&2X|&AGp(QRJo~Z^4rcu=9hs%|!
zKbb3Q$!ku)B-*@YP=~vgiTj)&!PK-#0aK@g+U2rIETA3O2i~=uP78nW3mGvkS@kDh
zz_iUcfc5-X@H+g=h03YEvw8n#JK+9**@>$EtX&$#12fg$u>#ad6DiZMh^Z&WblqG^
z%({3G)=kyEmulR`ITaIHjWI*OC6TF=@z9uU-3KhIIZHE*f3Td!prg`i@8m>g=<YrE
z&89O$;}h>qWG04Y?`Gbeok;@;f&0w}4xdw1_#P!7rED4$Q-=QFi|fgI6cR}4l|pjd
zEZ8MTf+i<5>$aUw7Kxjc`bILJD=cC|1)|HqxD&}0Eld=GKe92ks;>g8ISVW7_LgoI
zfZWmHzo~>F7@dJ>4Ly}E97^3asryjst4V$Pmu`NQs!MMloj)Gge{-%bWnXrltxF#s
zMY}emC*Tng*6mPQAP2B1`EoVr_9NTDscaKnDHB}Omg8-NHIO4IijgZ}MREMiCU!zl
zX-O$pikglIYemw|CehW_49#Mt5%xYgA&?X>v+%Ozv=h^|FdcRyH)YbnwAu-t*C@j%
zuiLmxG{bUa4<%iP2a#tU-6+g}vcv`l2MK#ETAH9T00%4&`Xx+j=qEY)iS#JBmO2sw
z8+X?4915|T5Zf843s;}{kr>>(xYP65+!KEP%Ju#38{dr|2=6}?r9-i^CU*Yr6U6Ql
z9{IZ(OnP<!iGhu&^{FksE_Aro8`JC4TbJuXXTy)=$m4;B0|&v_u{3-ng$||un$*9u
z^kigT>aR<0fqpRbIPx&^arAiz$-Rv>6ppUlc^+-aFDRq^>)>#T<G<m=R4Blphd%*B
zQ8GY{sN%dmKNAl-Vv+q_G})0|86YOqrNWT`X>3sV6sXIH%L8E#y$cTMWKus&4o__3
zb41uX(gaevRWemu$D`yboUx9lH(_e<9LF7_u4B~uGfLD@;t$~x7j29pA-q}rf$#ZI
a?szoRgm`j&a_h?4<blxD5Rnjbeg6sFRI5|~

diff --git a/backend/__pycache__/extensions.cpython-312.pyc b/backend/__pycache__/extensions.cpython-312.pyc
deleted file mode 100644
index e17ecbc8e89d23d62cdd317a4754cf5705bd2b0f..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 853
zcmYLHO=uHA6rRaU{<cXIn>H1TT2LtQ;6lM3jHtoiVio*5bQMCHownQVX4Bn`O>WWB
zQc9HymR9_05v5Xvf)@`;>A{ni3IWq81wj)P4@P^D>cN?$vBNU+ecyZUdvAC4o!2V>
zwkD6g?P;|E@QIV^a&Ch4zYI(P8OTrt8k8X9*rwVvB%v}!DwZ(QkZPCgHbCI~W~t<0
z4E<+L1xPM8U>feLtG3xXWh~oe@Z2$vDw-q^p|5c(UPV<u$eld0a~@VAY!;W~&7eJi
z)b0gFv*ats-E8+0Up4C<kc9`R%2*AO1i41?c5>vq;>)1QIS2<q8g+s}81j7M4MLC#
z7teP@)Oat^GK}G~F-1K`-KrjsslB>sDc`rVG(<5c6eo4VqBglJwUbpBM<)tnkG?KG
zEZ%xj7+ttPWW_ArzgZZYE!>^ElnU^ashQ%-$x2E&ey};k48f1r<AsHh&u<pL+?gwk
z3>RKZ^XJCg$<Q|H?^a`Gf7BdMW0koK{_&_#ku^4;fw^EecteUUMI(lbE0_mqtwuE6
z$V5#`H)1`6+RKfpr<@**s|rc*H&GHj)SfgHM%*crL@RFY6X`ffT8f^akWge=#xt<a
zyun6TylfJ~6xB>zJg&!68nZFQQ;Kyu)g^Wtdcq<JxmE0n#rqi$Nt$t!`I!5Y8R|Nu
z>2gXXhm9S~i(jre&bAVQ5UzoiHPEyQJgcDQrvo_rLszr56=%)RwJa_<KwW*dwuId<
zm=EllI4~8y9iBO}Aio;O1tQswkJ$eKH@wFUIo!B{-OEBKhxg_E_1D{f=bipv0Kp)a
zJ-cVoOysd+I=$R-WLY?x!;yTTG24;%Hw?G`DLGl%hRJ`+r(z@smV)+37%epgBW-A@
GjpKg^eEM_%

diff --git a/backend/app.py b/backend/app.py
index 260e3fd..e350509 100644
--- a/backend/app.py
+++ b/backend/app.py
@@ -1,7 +1,6 @@
 from flask import Flask
 from flask_cors import CORS
-from extensions import db, mail, redis_client
-import os
+from extensions import mail
 
 def create_app():
     app = Flask(__name__)
@@ -17,34 +16,17 @@ def create_app():
         response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
         return response
 
-
-    # 初始化数据库
-    db.init_app(app)
-    
     # 初始化邮件服务
     mail.init_app(app)
     
+    
     # 在这里注册路由
     with app.app_context():
-        # Ensure instance directory exists with proper permissions
-        instance_path = os.path.join(app.instance_path)
-        os.makedirs(instance_path, exist_ok=True)
-        # Ensure directory has correct permissions
-        os.chmod(instance_path, 0o777)
-        print(f"Instance directory path: {instance_path}")
-        
-        # Print the actual database URI being used
-        print(f"Database URI: {app.config['SQLALCHEMY_DATABASE_URI']}")
+        # Print the Redis URL being used
+        print(f"Redis URL: {app.config['REDIS_URL']}")
         
         from routes.auth_routes import auth_bp
         app.register_blueprint(auth_bp, url_prefix='/api/auth')
-        
-        # 创建所有数据库表
-        try:
-            db.create_all()
-            print("Database tables created successfully")
-        except Exception as e:
-            print(f"Error creating database tables: {e}")
     
     return app
 
diff --git a/backend/config.py b/backend/config.py
index 7b2dfee..93456b2 100644
--- a/backend/config.py
+++ b/backend/config.py
@@ -5,12 +5,10 @@ from dotenv import load_dotenv
 # 加载.env文件中的环境变量
 load_dotenv()
 
-# 数据库配置
-SQLALCHEMY_DATABASE_URI = os.getenv('SQLALCHEMY_DATABASE_URI', 'sqlite:///app.db')
-SQLALCHEMY_TRACK_MODIFICATIONS = False
-
 # Redis配置
 REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")
+REDIS_DB = int(os.getenv("REDIS_DB", "0"))
+REDIS_EXPIRE = int(os.getenv("REDIS_EXPIRE", "604800"))  # 默认7天
 
 # 邮件配置
 MAIL_SERVER = os.getenv('MAIL_SERVER', 'smtp.qq.com')
diff --git a/backend/extensions.py b/backend/extensions.py
index ca881c6..835ebb2 100644
--- a/backend/extensions.py
+++ b/backend/extensions.py
@@ -1,11 +1,8 @@
-from flask_sqlalchemy import SQLAlchemy
 from flask_mail import Mail
 import redis
-import time
 import os
 
-# 初始化扩展，但不绑定到具体应用
-db = SQLAlchemy()
+# 初始化邮件扩展，但不绑定到具体应用
 mail = Mail()
 
 # 添加错误处理，使用内存字典作为备选
diff --git a/backend/models/__pycache__/user.cpython-312.pyc b/backend/models/__pycache__/user.cpython-312.pyc
deleted file mode 100644
index 6ebf6781827633b4d94f8c7072d64447390e2cbb..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1946
zcmb7E%}*Og6rWx1+G}HDY(9kDkkZmB@}aopLyE|UD5VXq1gb>Z!(LXlXMi>9HJRNN
z7;*4{16&HI2ZK@xq+UR9pr_^^s1zxerclKiHEN`uxTT@J^wc-&kJ?c<WTgGgdv9mn
zzTf-UC!tUP!TNRV=lN3)LVt3lzT}#4`3(qVgb@}DlowP%;Ie3lc~KQz*<*O}k}Bn8
zRThwl?jbC#BP<gk7pyz`e?Nxr@TK~S-h}UhiwS{=I0LBQv`uV1PZA>QnI|TppleHM
z%UUi_tSzLi1=g8eAlb!MW0rfVFK<n_{8r#`6Ql|lsUj9skBEqra~anUS9h?!AyO=!
zc#g&D3DtMiUDw{x>W^z!I)?ANl88ktpLma@s;>Iq+L!N2UxBywr8IoWC;kS%wyXR=
zZhEV6HzNt<t~Kjb`6STr7shStNbSHuzz7ZjMvLu<Fq6Kv2xYPZXx)dBw=GdUpQc4^
zkrXe+!Oa&550iBhlNIK5O#OjFm|{AHk<J+8Vg(LdlmHR}ZFe{3!(=Y)7<RT+DX=2M
zdyGGq9{`k*U8@8_YeJp<8qylpB03Ug5+da-&q6Kzb|f;%BE}q3>Sl|7sK5W;+euEv
zN*cv%a<Y(h^2D^Q<UQS<ax%#|S}<*5;-O?Fom~VWnJ-{sSV>NNaH+_G7O@*myc*%I
z2AfTsofQTsq2K$4Pp8iM?rccEDe+4%p%$*Zt6Z*wAhd8rx#pbki?ARAHR~**onQdo
zd}L@Bhi-rxLCVX{+FQqMwbPBX)fnNI_)Um4{Qkknvw_j41EZ%aXW{W*lyMq|H`zw6
zLE&k3BVGfcjMh*N_SY9!-xNK{alWrDI9s3krZ+i%lTs6pYdaRcmu7+bOhRI!j+w&i
zVy5$i$t0iF4Hn2!0zV(DrR{`FufsL^E{A>&?*TBsZWZPVG!F*^+5;AgbL_9C&1V-h
ztY_`jpqsCn##3y40#HIPqCMpsJ2xu5*Y-nup-OkGtnR3l`1SqdUh-Ld_-TCjEI#^|
zU+xIJM6y5NCUGXw$rMfFVQLx+Xd3jCV{kdBX%C#VQF{~8G@Fl0Ri!-D%==lvaPlVe
zrJyh833Vwk@2pLAbH0fh50NR8K>a@ahbd1s%%Pn%3(GET8UqXEvrh*Aj*uIfOPVU&
z%7GWy`T<}aRl43OO~3F*H=<jy&Di!(d2DCwaOB+oacQCw?%kkU#m(YwY&W_e+lw6x
zJ?uNgk47GUcpm<$G*t<9Z%k~ZHdEXBcBZWF=m(zf%)`k?U61AS;7sZBN>|_ZL^-vS
z+SPY6`}&@K=y_<KI_F(?O4F4{d^=i>?ZkG6_HXUoI#qrO{}?`xjF-NAB?<D~S6)H>
zRJind<!WZ#sAm!i3y>8UTT3sPmYcU~0wT+VF0K-19!50lP~9%NzY2G5m^{rVyGs5e
zo&nzP)h<wOS1WXv@}l$huy`lE^az6R9L1iazCTdvZ>d`dYz%GP+`Rb@0@1zyA9)d+
AjsO4v

diff --git a/backend/models/user.py b/backend/models/user.py
index 4eaf3ca..d707db3 100644
--- a/backend/models/user.py
+++ b/backend/models/user.py
@@ -1,15 +1,17 @@
-from extensions import db
 from datetime import datetime
 from werkzeug.security import generate_password_hash, check_password_hash
+import json
+import uuid
+from extensions import redis_client, use_redis, memory_storage
+from datetime import timezone
 
-class User(db.Model):
-    __tablename__ = 'users'
-    
-    id = db.Column(db.Integer, primary_key=True)
-    username = db.Column(db.String(64), index=True, unique=True, nullable=False)
-    email = db.Column(db.String(120), index=True, unique=True, nullable=False)
-    password_hash = db.Column(db.String(128), nullable=False)
-    created_at = db.Column(db.DateTime, default=datetime.utcnow)
+class User:
+    def __init__(self, id=None, username=None, email=None, password_hash=None, created_at=None):
+        self.id = id if id else str(uuid.uuid4())
+        self.username = username
+        self.email = email
+        self.password_hash = password_hash
+        self.created_at = created_at if created_at else datetime.now(timezone.utc).isoformat()
     
     def set_password(self, password):
         self.password_hash = generate_password_hash(password)
@@ -22,5 +24,135 @@ class User(db.Model):
             'id': self.id,
             'username': self.username,
             'email': self.email,
-            'created_at': self.created_at.isoformat()
-        }
\ No newline at end of file
+            'created_at': self.created_at
+        }
+    
+    def save(self):
+        """将用户保存到Redis或内存"""
+        user_data = {
+            'id': self.id,
+            'username': self.username,
+            'email': self.email,
+            'password_hash': self.password_hash,
+            'created_at': self.created_at
+        }
+        
+        if use_redis:
+            try:
+                # 保存用户主数据
+                redis_client.set(f"user:{self.id}", json.dumps(user_data))
+                
+                # 保存用户名索引
+                redis_client.set(f"username:{self.username}", self.id)
+                
+                # 保存邮箱索引
+                redis_client.set(f"email:{self.email}", self.id)
+                
+                return True
+            except Exception as e:
+                print(f"Redis保存失败: {str(e)}")
+                return False
+        else:
+            try:
+                memory_storage[f"user:{self.id}"] = user_data
+                memory_storage[f"username:{self.username}"] = self.id
+                memory_storage[f"email:{self.email}"] = self.id
+                return True
+            except Exception as e:
+                print(f"内存保存失败: {str(e)}")
+                return False
+
+    @staticmethod
+    def get_by_id(user_id):
+        """通过ID获取用户"""
+        if use_redis:
+            try:
+                user_data = redis_client.get(f"user:{user_id}")
+                if not user_data:
+                    return None
+                
+                user_dict = json.loads(user_data)
+                return User(
+                    id=user_dict['id'],
+                    username=user_dict['username'],
+                    email=user_dict['email'],
+                    password_hash=user_dict['password_hash'],
+                    created_at=user_dict['created_at']
+                )
+            except Exception as e:
+                print(f"从Redis获取用户失败: {str(e)}")
+                return None
+        else:
+            if f"user:{user_id}" in memory_storage:
+                user_dict = memory_storage[f"user:{user_id}"]
+                return User(
+                    id=user_dict['id'],
+                    username=user_dict['username'],
+                    email=user_dict['email'],
+                    password_hash=user_dict['password_hash'],
+                    created_at=user_dict['created_at']
+                )
+            return None
+
+    @staticmethod
+    def get_by_username(username):
+        """通过用户名获取用户"""
+        if use_redis:
+            try:
+                user_id = redis_client.get(f"username:{username}")
+                if not user_id:
+                    return None
+                    
+                return User.get_by_id(user_id.decode('utf-8'))
+            except Exception as e:
+                print(f"通过用户名获取用户失败: {str(e)}")
+                return None
+        else:
+            if f"username:{username}" in memory_storage:
+                user_id = memory_storage[f"username:{username}"]
+                return User.get_by_id(user_id)
+            return None
+
+    @staticmethod
+    def get_by_email(email):
+        """通过邮箱获取用户"""
+        if use_redis:
+            try:
+                user_id = redis_client.get(f"email:{email}")
+                if not user_id:
+                    return None
+                    
+                return User.get_by_id(user_id.decode('utf-8'))
+            except Exception as e:
+                print(f"通过邮箱获取用户失败: {str(e)}")
+                return None
+        else:
+            if f"email:{email}" in memory_storage:
+                user_id = memory_storage[f"email:{email}"]
+                return User.get_by_id(user_id)
+            return None
+
+    def delete(self):
+        """删除用户记录"""
+        if use_redis:
+            try:
+                # 删除用户主数据和索引
+                redis_client.delete(f"user:{self.id}")
+                redis_client.delete(f"username:{self.username}")
+                redis_client.delete(f"email:{self.email}")
+                return True
+            except Exception as e:
+                print(f"Redis删除失败: {str(e)}")
+                return False
+        else:
+            try:
+                if f"user:{self.id}" in memory_storage:
+                    del memory_storage[f"user:{self.id}"]
+                if f"username:{self.username}" in memory_storage:
+                    del memory_storage[f"username:{self.username}"]
+                if f"email:{self.email}" in memory_storage:
+                    del memory_storage[f"email:{self.email}"]
+                return True
+            except Exception as e:
+                print(f"内存删除失败: {str(e)}")
+                return False
\ No newline at end of file
diff --git a/backend/requirements.txt b/backend/requirements.txt
index afe8866..eb5e2f3 100644
--- a/backend/requirements.txt
+++ b/backend/requirements.txt
@@ -1,6 +1,5 @@
 Flask
 flask-cors
-Flask-SQLAlchemy
 Flask-Mail
 redis
 PyJWT
diff --git a/backend/routes/__pycache__/auth_routes.cpython-312.pyc b/backend/routes/__pycache__/auth_routes.cpython-312.pyc
deleted file mode 100644
index 3d6f1311f66d84954be34d13713bfc95a44b865c..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 6383
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
I5qSgu0u>?nHUIzs

diff --git a/backend/routes/auth_routes.py b/backend/routes/auth_routes.py
index dea5639..62fbd87 100644
--- a/backend/routes/auth_routes.py
+++ b/backend/routes/auth_routes.py
@@ -1,5 +1,4 @@
 from flask import Blueprint, request, jsonify ,make_response
-from models.user import User
 from services.auth_service import register_user, authenticate_user, generate_token, reset_password , update_user_profile
 from services.verification_service import generate_verification_code, save_verification_code
 from services.email_service import send_verification_email
diff --git a/backend/services/__pycache__/auth_service.cpython-312.pyc b/backend/services/__pycache__/auth_service.cpython-312.pyc
deleted file mode 100644
index 06220bcead7df87c1bfa6cc4e980e3e5764d7fc7..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 5941
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

diff --git a/backend/services/__pycache__/email_service.cpython-312.pyc b/backend/services/__pycache__/email_service.cpython-312.pyc
deleted file mode 100644
index beb2b0b9d6002128e0ada457c196e3161dadfebf..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1500
zcmcIkTWB0r7(TOe*;_W3W@Bt?nw6&DD$PKlEwoEuX>LLj(6(aovTSB%H<Rv-xineX
zmCX{Qg+QxP3??yA6RB1W6;aU^$%9Y6q#zg$$y2kF?307>K`My<nb}zv-#swreE<D?
z=lpYi4g`D%#@NN5lI;vaPl(_QR}CEY0(cLJNTgCIO^s6&!LF1mO^?$Src+Fs9cKYE
zb7-8)vth1Eg2NPck4UN-Pf7rpbX-os>KAlHkuq8=p34bN5#sKKkB0B?Z<wGURdi{9
z>@n5oS<{KGqkxLE#?}<5;3}XbRiHno?~_b0ij2q<s6`~Q%XEQ>)wBqSoTYVJTA*$Z
zFVg%Do@#Q?ziWZHPuUWM@}84OYj$isNO``<YHf}zdbM^37g#515iPqMOrbF(`iktE
zY~F9L)6_JYp~uiP6>ieIA=(#$QMvtgwKQA(Z2n+lc7JuYTK;nHhi@#4ehhqG8HsC?
zav~o(9Wu)I_TQhYd*b$y=*yR5{R4y1YnQLat_+O!54;+tv0K$ArX)ebK1CAboD6rN
zVosGZqNM0AIAtMOW&P1_59fVWt^edU7B((~^f!pJWj@$guh%t}ZW(uP8cQpC-+h0!
za`Ua~J1b90<;o{z<AWtgV|?`?cpPkeYdk0$U#!)`pcE)8KR(*OyH4~LPYARNI5aDZ
zA5|AtZ2GS|dyPz<>2n<F`64`MEyqZ%ug)gI=Ngrb=Vft<sG5?^B>VJtA$f$aNsUqe
zBh|(-4j-Fv-EvhA!p3SnVI5Ir?ZLs<>lZ?!gJGXS{shbk*-S!CDx}#lGm#bZn3>el
zDTVYoX2?xr@4$>8<uo~)!E8>EGa9CWYna2{dQ)IV$U;kaAV?w41g6t!5>t}Ofj~Ml
z6nZ+uUsEMT<x_cq@6QT)nluwXBx}R^1fPJD)S%cIej+Yh2f%~x4Ox&>ULub{tS0v6
z^0<@iDt1Fs<b*85$-ZKikJ1Un2rG3NrV=tesO6>7&`#jlUjyBb1KnGpvyTJkN`rg8
zw(Zu=?O@lPi`y+7f4CVxSGr_2)4`)AhmM_C;7r7Jv!>hA>M32C8#aS<um>!s!mH;@
zM860Yu4ZXv*^V7g({1l9@12wL&D$;QfA08$zatk>2ew*!)~?)Z`}noh;jQM=zj%6g
zT7rL>EEu1vWUCK5qDRo?5pOg?ZyxWAo~Jj@vw%m#ZtP2>;_CGnVQycIPnv<_QGu&!
zUkz({SeIz={uCWTN~Amk6ZS;XSy4|(eM%RI<QY=Q3uDq0MeU*!yXg2X>N;djQ60*2
Gp#KLY4D&Gn

diff --git a/backend/services/__pycache__/verification_service.cpython-312.pyc b/backend/services/__pycache__/verification_service.cpython-312.pyc
deleted file mode 100644
index 38133455d1fbf72cf10831770970121490f76b7e..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 3068
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

diff --git a/backend/services/auth_service.py b/backend/services/auth_service.py
index 4d34a57..a66ed4b 100644
--- a/backend/services/auth_service.py
+++ b/backend/services/auth_service.py
@@ -1,9 +1,8 @@
 from models.user import User
-from extensions import db
 from services.verification_service import verify_code
 from flask import current_app
 import jwt
-from datetime import datetime, timedelta
+from datetime import datetime, timedelta ,timezone
 
 def register_user(username, email, password, verification_code):
     """注册新用户"""
@@ -12,32 +11,28 @@ def register_user(username, email, password, verification_code):
         return {'success': False, 'message': '验证码无效或已过期'}
     
     # 检查用户名是否已存在
-    if User.query.filter_by(username=username).first():
+    if User.get_by_username(username):
         return {'success': False, 'message': '用户名已存在'}
     
     # 检查邮箱是否已存在
-    if User.query.filter_by(email=email).first():
+    if User.get_by_email(email):
         return {'success': False, 'message': '邮箱已被注册'}
     
     # 创建新用户
     user = User(username=username, email=email)
     user.set_password(password)
     
-    try:
-        db.session.add(user)
-        db.session.commit()
+    if user.save():
         return {'success': True, 'message': '注册成功', 'user': user.to_dict()}
-    except Exception as e:
-        db.session.rollback()
-        print(f"用户注册失败: {str(e)}")
+    else:
         return {'success': False, 'message': '注册失败，请稍后重试'}
 
 def authenticate_user(username_or_email, password):
     """用户登录认证"""
     # 支持使用用户名或邮箱登录
-    user = User.query.filter_by(username=username_or_email).first()
+    user = User.get_by_username(username_or_email)
     if not user:
-        user = User.query.filter_by(email=username_or_email).first()
+        user = User.get_by_email(username_or_email)
     
     if user and user.check_password(password):
         return {'success': True, 'user': user}
@@ -48,8 +43,8 @@ def generate_token(user_id):
     """生成JWT令牌"""
     payload = {
         'user_id': user_id,
-        'exp': datetime.utcnow() + current_app.config.get('JWT_ACCESS_TOKEN_EXPIRES', timedelta(hours=1)),
-        'iat': datetime.utcnow()
+        'exp': datetime.now(timezone.utc) + current_app.config.get('JWT_ACCESS_TOKEN_EXPIRES', timedelta(hours=1)),
+        'iat': datetime.now(timezone.utc)
     }
     return jwt.encode(payload, current_app.config['JWT_SECRET_KEY'], algorithm='HS256')
 
@@ -60,24 +55,25 @@ def reset_password(username, email, verification_code, new_password):
         return {'success': False, 'message': '验证码无效或已过期'}
     
     # 找到匹配用户名和邮箱的用户
-    user = User.query.filter_by(username=username, email=email).first()
-    if not user:
+    user = User.get_by_username(username)
+    if not user or user.email != email:
         return {'success': False, 'message': '用户名或邮箱不正确'}
     
     # 重置密码
     try:
         user.set_password(new_password)
-        db.session.commit()
-        return {'success': True, 'message': '密码重置成功'}
+        if user.save():
+            return {'success': True, 'message': '密码重置成功'}
+        else:
+            return {'success': False, 'message': '密码重置失败，请稍后重试'}
     except Exception as e:
-        db.session.rollback()
         print(f"密码重置失败: {str(e)}")
         return {'success': False, 'message': '密码重置失败，请稍后重试'}
     
 def update_user_profile(user_id, current_password, username=None, email=None, new_password=None):
     """更新用户资料"""
     # 查找用户
-    user = User.query.get(user_id)
+    user = User.get_by_id(user_id)
     if not user:
         return {'success': False, 'message': '用户不存在'}
     
@@ -86,11 +82,13 @@ def update_user_profile(user_id, current_password, username=None, email=None, ne
         return {'success': False, 'message': '当前密码错误'}
     
     changes_made = False
+    old_username = user.username
+    old_email = user.email
     
     # 更新用户名
     if username and username != user.username:
         # 检查用户名是否已被使用
-        if User.query.filter(User.id != user_id, User.username == username).first():
+        if User.get_by_username(username):
             return {'success': False, 'message': '用户名已被使用'}
         user.username = username
         changes_made = True
@@ -98,7 +96,7 @@ def update_user_profile(user_id, current_password, username=None, email=None, ne
     # 更新邮箱
     if email and email != user.email:
         # 检查邮箱是否已被使用
-        if User.query.filter(User.id != user_id, User.email == email).first():
+        if User.get_by_email(email):
             return {'success': False, 'message': '邮箱已被使用'}
         user.email = email
         changes_made = True
@@ -112,9 +110,17 @@ def update_user_profile(user_id, current_password, username=None, email=None, ne
         return {'success': False, 'message': '没有内容被修改'}
     
     try:
-        db.session.commit()
-        return {'success': True, 'message': '用户信息更新成功', 'user': user.to_dict()}
+        # 如果用户名或邮箱更改，需要删除旧的索引
+        if (username and username != old_username) or (email and email != old_email):
+            # 创建一个临时用户对象来删除旧索引
+            temp_user = User(id=user.id, username=old_username, email=old_email)
+            temp_user.delete()
+        
+        # 保存更新后的用户
+        if user.save():
+            return {'success': True, 'message': '用户信息更新成功', 'user': user.to_dict()}
+        else:
+            return {'success': False, 'message': '更新用户信息失败，请稍后重试'}
     except Exception as e:
-        db.session.rollback()
         print(f"更新用户信息失败: {str(e)}")
         return {'success': False, 'message': '更新用户信息失败，请稍后重试'}
\ No newline at end of file
diff --git a/docker-compose.yml b/docker-compose.yml
index fda5e44..67b8419 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -20,7 +20,6 @@ services:
     environment:
       - FLASK_APP=app.py
       - FLASK_ENV=production
-      - SQLALCHEMY_DATABASE_URI=sqlite:////app/instance/app.db
       - REDIS_URL=redis://redis:6379/0
       - MAIL_SERVER=smtp.qq.com
       - MAIL_PORT=587
-- 
2.39.5 (Apple Git-154)

